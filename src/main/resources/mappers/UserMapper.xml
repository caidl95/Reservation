<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.user.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.example.demo.user.entity.User">
        <constructor>
            <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="loginname" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="password" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="email" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="phone" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="nickname" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="question" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="answer" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="role" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
            <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
        </constructor>
    </resultMap>

    <sql id="Base_Column_List">
        id, loginname, password, email, phone ,nickname, question, answer, role, create_time, update_time
    </sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from res_user
        where id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from res_user
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="com.example.demo.user.entity.User">
        insert into res_user (
        id, loginname, password,
        email, phone, nickname,
        question,answer, role,
        create_time,update_time)
        values (#{id,jdbcType=INTEGER}, #{loginname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
        #{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR},
        #{question,jdbcType=VARCHAR}, #{answer,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER}, now(),now())
    </insert>

    <insert id="insertSelective" parameterType="com.example.demo.user.entity.User">
        insert into res_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="loginname != null">
                loginname,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="nickname != null">
                nickname,
            </if>
            <if test="question != null">
                question,
            </if>
            <if test="answer != null">
                answer,
            </if>
            <if test="role != null">
                role,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="loginname != null">
                #{loginname,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="nickname != null">
                #{nickname,jdbcType=VARCHAR},
            </if>
            <if test="question != null">
                #{question,jdbcType=VARCHAR},
            </if>
            <if test="answer != null">
                #{answer,jdbcType=VARCHAR},
            </if>
            <if test="role != null">
                #{role,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                now(),
            </if>
            <if test="updateTime != null">
                now(),
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.user.entity.User">
        update res_user
        set
        <if test="loginname != null">
            loginname = #{loginname,jdbcType=VARCHAR},
        </if>
        <if test="password != null">
            password = #{password,jdbcType=VARCHAR},
        </if>
        <if test="email != null">
            email = #{email,jdbcType=VARCHAR},
        </if>
        <if test="phone != null">
            phone = #{phone,jdbcType=VARCHAR},
        </if>
        <if test="nickname != null">
            nickname = #{nickname,jdbcType=VARCHAR},
        </if>
        <if test="question != null">
            question = #{question,jdbcType=VARCHAR},
        </if>
        <if test="answer != null">
            answer = #{answer,jdbcType=VARCHAR},
        </if>
        <if test="role != null">
            role = #{role,jdbcType=INTEGER},
        </if>
        <if test="createTime != null">
            create_time = #{createTime,jdbcType=TIMESTAMP},
        </if>
        update_time = now()
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.demo.user.entity.User">
        update res_user
        set
        loginname = #{username,jdbcType=VARCHAR},
        password = #{password,jdbcType=VARCHAR},
        email = #{email,jdbcType=VARCHAR},
        phone = #{phone,jdbcType=VARCHAR},
        nickname = #{nickname,jdbcType=VARCHAR},
        question = #{question,jdbcType=VARCHAR},
        answer = #{answer,jdbcType=VARCHAR},
        role = #{role,jdbcType=INTEGER},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = now()
        where id = #{id,jdbcType=INTEGER}
    </update>


    <select id="checkLoginname" resultType="int" parameterType="string">
        select count(1) from res_user
        where loginname = #{loginname}
    </select>

    <select id="checkEmail" resultType="int" parameterType="string">
        select count(1) from res_user
        where email = #{email}
    </select>


    <select id="selectLogin" resultMap="BaseResultMap" parameterType="map">
        SELECT
        <include refid="Base_Column_List"/>
        from res_user
        where loginname = #{loginname}
        and password = #{password}
    </select>

    <select id="selectPhoneLogin" resultMap="BaseResultMap" parameterType="map">
        SELECT
        <include refid="Base_Column_List"/>
        FROM res_user
        WHERE phone = #{phone}
    </select>

    <select id="selectQuestionByUsername" resultType="string" parameterType="string">
        select
        question
        from res_user
        where loginname = #{loginname}
    </select>

    <select id="checkAnswer" resultType="int" parameterType="map">
        SELECT
        count(1)
        from res_user
        where loginname=#{loginname}
        and question = #{question}
        and answer = #{answer}
    </select>

    <update id="updatePasswordByUsername" parameterType="map">
        update res_user
        SET password = #{passwordNew},update_time = now()
        where loginname = #{loginname}
    </update>

    <select id="checkPassword" resultType="int" parameterType="map">
        SELECT
        count(1)
        from res_user
        where password = #{password}
        and id = #{userId}
    </select>


    <select id="checkEmailByUserId" resultType="int" parameterType="map">
        select count(1) from res_user
        where email = #{email}
        and id != #{userId}
    </select>

    <select id="checkPhoneByUserId" resultType="int" parameterType="map">
        select count(1) from res_user
        where phone = #{phone}
        and id != #{userId}
    </select>

    <select id="checkPhone" resultType="int" parameterType="string">
        select count(1) from res_user
        where phone = #{phone}
    </select>

    <select id="getListUser"  resultMap="BaseResultMap">
      select
        <include refid="Base_Column_List"/>
      from res_user
      where 1 = 1
    </select>


</mapper>